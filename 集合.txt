Collection是这个集合框架的基础
Set集合的主要特点是集合中的元素不能重复；该接口有两个实现类：HashSet和TreeSet
因为TreeSet实现了SortedSet接口，所以TreeSet中的元素是有序的
List又称有序的Collection，他按照对象进入的顺序保存对象，它能对列中每个元素的插入和删除位置进行精确的控制。
同时，它可以存入重复的对象，该接口有三个实现类：LinkedList，ArrayList和Vector都实现了List接口
Map提供了一个从键映射到值的数据结构，其中键（key）是唯一的，值（value）可以重复
Map的实现类有：HashMap，TreeMap，LinkedHashMap都实现了Map接口：
其中HashMap是基于散列表实现的，可以用HashCode进行快速查询
LinkedHashMap是基于链表来维护内部的顺序
TreeMap是基于红黑树的数据结构来实现的，内部元素是按需排列
Iterator迭代器是一个对象，他的工作室遍历并选取集合中的对象
好处：开发人员不需要了解集合内部结构，就可以用迭代器对容器进行遍历
迭代器的使用注意事项
使用容器的Interator()方法就可以返回一个迭代器Iterator，然后通过Iterator的next()的方法返回第一个元素；
使用Interator的hasNext()方法就可以判断容器中是否还有元素，如果有可以继续用next()方法获取下一个元素；
可以通过容器的remove()方法来删除迭代器（Iterator）返回的元素

ArrayList和HashMap线程是不安全的
Vector和Hashtable线程是安全的
怎样创建一个线程安全的HashMap：Map map = Collections.synchronizedMap(new HashMap())
HashMap和Hashtable不能存重复的键，如果存入重复的键会覆盖先前的值
HashMap的默认大小是16，而且一定是2的指数
HashMap是无序的，可以创建用来快速的插入，删除，定位元素
TreeMap实现了SortMap接口，能够把保存的记录根据键排序，因此取出来的是排序后的键值对。如果需要按照自然顺序或自定义顺序，那么TreeMap会更好
LinkedHashMap是HashMap的一个子类，如果需要输出的顺序和输入的顺序相同，那么使用LinkedHashMap可以实现

不可以变类：String，Integer，Float等基本类型的包装类都是不可以变类，是final类，方法不可以重写
Collection是一个接口，它包含了对集合类进行操作的通用接口方法
Collections是对集合类的一个包装类，它提供了一系列静态方法，用以实现对集合的搜索，排序，线程安全化操作，
Collections服务于Collection，如果服务对象的集合为null时，这些方法会抛出空指针异常

怎样实现多线程
extend基础Thread类重写run()方法
实现Runnable接口，并实现接口中run()方法
Thread类本质上也是实现了Runnable接口

线程同步的方法
synchronized关键字
synchronized修饰的方法，或代码块

String是不可变类，一旦一个String对象呗创建之后，包含在这个对象中的字符序列是不可变的，直至这个对象销毁
StringBuffer是一个字符序列可变的字符串，可以通过append、insert、reverse、setChartAt、setLength等方法改变其内容。一旦目的达成，可以调用toString()方法将其变成String类型
jdk1.5新加了一个StringBuilder类，与StringBuffer类似，构造方法与方法基本相同，不同的是StringBuffer线程是安全的，StringBuilder线程是不安全的，但是效率高
通常情况下创建一个可变字符序列，应优先考虑StringBuilder，因为它是最新版本的，速度快，和HashMap同理
